#+TITLE:	Music History
#+SUBTITLE:	Log
#+OPTIONS:	toc:nil num:nil
#+STARTUP:	indent show2levels
#+CATEGORY:	Projects
#+TAGS:		log python MusicHistory MusicAnalytics smplayer mpv sql databases

* Thursday, February 16, 2023
:LOGBOOK:
CLOCK: [2023-02-16 Thu 03:15]--[2023-02-16 Thu 04:00] =>  0:45
:END:
** Dusty Playlists
- I did this in the database, instead of in Python
*** Alembic
- I am seriously thinking that Alembic is more of a hindrance than a help
- I probably need to explore just using it for version control, without the object models
* Tuesday, December 27, 2022
:LOGBOOK:
CLOCK: [2022-12-27 Tue 05:15]--[2022-12-27 Tue 07:15] =>  2:00
:END:
** Migration to ~pendulum~
- User installation of ~pendulum~ (~build_playlists~ crashed, overnight)
** Favourite Artists / Directories
- I created a scratch file for this, ~popular_artists_1.py~
- ~2021_Top500.m3u~ was used to create the first playlist, ~~/Music/.Playlists/yearly/2021_TopDirs.m3u~
*** Skipped Songs
- So far, I've found one Bee Gees song

* Saturday, December 24, 2022
:LOGBOOK:
CLOCK: [2022-12-24 Sat 14:45]--[2022-12-24 Sat 16:15] =>  1:30
CLOCK: [2022-12-24 Sat 06:30]--[2022-12-24 Sat 10:00] =>  3:30
:END:
** Migration to ~pendulum~
** Christmas Playlists

* Thursday, December 22, 2022
:LOGBOOK:
CLOCK: [2022-12-22 Thu 04:00]--[2022-12-22 Thu 10:30] =>  6:30
:END:
** Reconciling Music History database against file system
*** Christmas Collection
**** ~update_collection()~
- Strange: I can't find any Christmas music that I played in previous years
* Wednesday, December 21, 2022
:LOGBOOK:
CLOCK: [2022-12-21 Wed 10:00]--[2022-12-21 Wed 12:00] =>  2:00
CLOCK: [2022-12-21 Wed 04:00]--[2022-12-21 Wed 09:00] =>  5:00
:END:
** Reconciling Music History database against file system
*** ~relocated_files()~
*** ~similar_filenames()~
*** ~update_db_filename()~
*** ~fix_directory()~
**** theclashVEVO Directory
* Tuesday, December 20, 2022
:LOGBOOK:
CLOCK: [2022-12-20 Tue 08:00]--[2022-12-20 Tue 11:30] =>  3:30
:END:
** Reconciling Music History database against file system
*** ~relocated_files()~
- Comparing filenames in the database against the file system
- So far, I am finding duplicate filenames, with and without spaces
* Monday, December 19, 2022
:LOGBOOK:
CLOCK: [2022-12-19 Mon 05:00]--[2022-12-19 Mon 08:00] =>  3:00
:END:
** Regenerated all playlists
- This applied changes in playlist creation logic and naming conventions, as well as the new *Countdown* list type
*** ~build_playlists~
- Restricted ~build_recent_lists()~ to run only for yesterday or today
- Added ~--force~ option to overwrite playlists
**** ~do_backup()~
- Creates "smart" numbered backups of playlists before overwriting
- If a backup exists and it is the same as the original, then there is no new backup file created
**** ~find_prev_filename()~
- Added this to deal with situations where there are missing playlists

* Saturday, December 17, 2022
:LOGBOOK:
CLOCK: [2022-12-17 Sat 05:00]--[2022-12-17 Sat 10:30] =>  5:30
:END:
** Reconciling Music History database against file system
*** ~reconcile_db~ (Python)
**** ~remove_extra_spces()~
- Finished code for updating ~dt_playhistory~ in ~developmentdb~ (4,336 rows)

* Wednesday, December 14, 2022
:LOGBOOK:
CLOCK: [2022-12-14 Wed 08:30]--[2022-12-14 Wed 11:30] =>  3:00
CLOCK: [2022-12-14 Wed 03:30]--[2022-12-14 Wed 07:30] =>  4:00
:END:
** ~build_playlists~
*** Replacing ~make_aliases()~ with simpler logic
- Trying to reverse engineer file names is silly when they are easily set in the calling function, ~build_top_lists()~
*** Moved playlist creation to its own function, ~make_playlist()~
- This evolved out of trying to create "Countdown" playlists
* Tuesday, December 13, 2022
:LOGBOOK:
CLOCK: [2022-12-13 Tue 16:00]--[2022-12-13 Tue 18:15] =>  2:15
:END:
** Reconciling Music History database against file system
*** Extra Spaces
- I found a lot of filenames that contain two or more spaces in the filename
- When compared against the database, it looked like spaces had been added to the filename
*** ~reconcile_db~ (Python)
**** ~remove_extra_spaces()~
- Uses ~os.walk()~ to remove extra spaces from filenames, including directories
- Working on updating ~dt_playhistory~ in ~developmentdb~
**** ~update_playlists()~
- Creates a tarball of all playlists (including symlinks) before doing anything else
- Updates playlists, removing extra spaces from filenames, including directories
- If the updated playlist contains filenames that no longer exist, they are renamed with a ~~.old~ extension
* Sunday, December 11, 2022
:LOGBOOK:
CLOCK: [2022-12-11 Sun 05:00]--[2022-12-11 Sun 06:45] =>  1:45
:END:
** Still working on deleting last uncompressed log file in ~log_extractor~
*** Switching to a single tarball didn't fix it
- Yesterday, it looked like it unintentionally resolved the issue, but that was run with the debugger
- Maybe it just needs more time?
** ~build_top_lists~
*** Finished change to relative symlinks
*** Added logic for symlinks to previous period playlists
*** Installed to ~~/bin~ and updated ~fcrontab~

* Saturday, December 10, 2022
:LOGBOOK:
CLOCK: [2022-12-10 Sat 04:00]--[2022-12-10 Sat 05:30] =>  1:30
:END:
** ~log_extractor~
*** Changed compression from individual log files to a single tarball


* Friday, December 9, 2022
:LOGBOOK:
CLOCK: [2022-12-09 Fri 17:15]--[2022-12-09 Fri 17:45] =>  0:30
CLOCK: [2022-12-09 Fri 14:45]--[2022-12-09 Fri 16:15] =>  1:30
CLOCK: [2022-12-09 Fri 10:00]--[2022-12-09 Fri 11:30] =>  1:30
CLOCK: [2022-12-09 Fri 07:00]--[2022-12-09 Fri 09:30] =>  2:30
:END:
** Still working on deleting the last uncompressed log file in ~log_extractor~
** Merged log files not compressed
*** Wrong approach
- I was copying the first log file (text, uncompressed) into the merge file, which resulted in a file that couldn't be processed
** ~shutil.make_archive~ vs. ~tarfile~: ~tarfile wins~

* Thursday, December 8, 2022
:LOGBOOK:
CLOCK: [2022-12-08 Thu 12:00]--[2022-12-08 Thu 13:00] =>  1:00
CLOCK: [2022-12-08 Thu 05:00]--[2022-12-08 Thu 09:00] =>  4:00
:END:
** Still working on deleting the last uncompressed log file in ~log_extractor~

* Wednesday, December 7, 2022
:LOGBOOK:
CLOCK: [2022-12-07 Wed 16:45]--[2022-12-07 Wed 18:15] =>  1:30
CLOCK: [2022-12-07 Wed 08:00]--[2022-12-07 Wed 11:30] =>  3:30
CLOCK: [2022-12-07 Wed 04:00]--[2022-12-07 Wed 07:00] =>  3:00
:END:
** Can't delete last uncompressed log file (~log_extractor~)
*** os.scandir() succeeds where Path() objects fail
- Add this to the list of bugs in ~pathlib.Path~
  * ~Path().glob()~ returns inconsistent results (not all items have full pathnames)
  * ~os.remove()~ can't delete the last item in a ~Path().glob()~ collection
** Consolidated / Merged Log Files
*** ~data_dir/MusicHistory/20221206~
- ~merged_20221206.log.xz~ was created when I tested ~log_extractor~ with ~os.scandir()~, above
- The merged log file is 1.1 MB in size, versus 4.6 MB for the compressed log files
- My method has a much lower load than ~difflib~
* Tuesday, December 6, 2022
:LOGBOOK:
CLOCK: [2022-12-06 Tue 16:00]--[2022-12-06 Tue 18:00] =>  2:00
CLOCK: [2022-12-06 Tue 07:45]--[2022-12-06 Tue 12:15] =>  4:30
:END:
** Consolidating Log Summary Files
*** ~difflib~
- This is easier than what I was doing, but it is CPU-intensive
- This is more suited to files that are edited, which log files are not
*** Custom File Consolidation
- Using ~set.intersection()~ and ~set.difference()~ methods didn't work--not even close
- Since log files aren't edited, the only requirement is extracting only new lines from each log file
- ~find_new_lines()~ - New function to iterate through log files and compare one file to the next, in chronological order, extract the new lines, and write them to a single file
* Monday, December 5, 2022
:LOGBOOK:
CLOCK: [2022-12-05 Mon 15:00]--[2022-12-05 Mon 18:00] =>  3:00
CLOCK: [2022-12-05 Mon 07:45]--[2022-12-05 Mon 11:45] =>  4:00
CLOCK: [2022-12-05 Mon 04:45]--[2022-12-05 Mon 07:15] =>  2:30
CLOCK: [2022-12-05 Mon 04:00]--[2022-12-05 Mon 04:30] =>  0:30
:END:
** Missing Playlist Extension on Symlinks (ie. ~Top40_2022-W48~ should be ~Top40_2022-W48.m3u~)
*** ~build_top_lists~
- I fixed the cause of this, but ~Top40_2022-W48~ was the number on item is yesterday's Top 10 playlist, with 86 plays--SMPlayer evidently tried to play this when I loaded the list, yesterday
- The database confirmed my suspicion that none of the play times (~play_secs~) exceeded three seconds, so I incorporated this into the logic for building Top XX lists, rather than deleting the entries
- 

* Sunday, December 4, 2022
:LOGBOOK:
CLOCK: [2022-12-04 Sun 15:00]--[2022-12-04 Sun 18:00] =>  3:00
CLOCK: [2022-12-04 Sun 10:00]--[2022-12-04 Sun 12:30] =>  2:30
CLOCK: [2022-12-04 Sun 08:30]--[2022-12-04 Sun 09:00] =>  0:30
CLOCK: [2022-12-04 Sun 04:10]--[2022-12-04 Sun 07:30] =>  3:20
:END:
** Log Summary Files
*** ~log_extractor~
- It looks like I forgot to replace ~Summaries~ with the ~date_id~ for the log files, but everything ran successfully
** Extracting Play Start/Stop/Pause Times
*** Current Method
- Everything is calculated based on ~Core::startMplayer: file:~ entries
* Saturday, December 3, 2022
:LOGBOOK:
CLOCK: [2022-12-03 Sat 16:00]--[2022-12-03 Sat 16:50] =>  0:50
CLOCK: [2022-12-03 Sat 04:00]--[2022-12-03 Sat 05:30] =>  1:30
:END:
** Archiving Log Files
*** Testing monthly compression vs daily
1. Copied May log files to ~data_dir/2022/05~
2. Decompressed and deleted ~.log.xz~ files
3. Created tarball ~smplayer_2022-05.txz~
4. Size of ~.log.xz~ files (*80 MB*) vs. tarball (*2.1 MB*)
5. Created tarball of ~.log.xz~ files, and it was *1.4 MB*--better than the first tarball
6. I contemplated changing the directory structure of how the log files are stored, in order to accommodate ~shutil.make_archive~, but after a bit of tinkering, it is more work than I care to undertake
   * If I automate monthly compression, I will probably opt for a temporary folder, but it won't be an issue until some time next year
7. ~log_extractor~ - Log Summary Files
   * Log summary files have been stored in a separate directory, ~Summaries~
   * They will now be stored in the same directory as the log files
*** Conclusion
Monthly tarballs of daily compressed log files appear to produce better results than tarballs of daily uncompressed log files
* Friday, December 2, 2022
:LOGBOOK:
CLOCK: [2022-12-02 Fri 16:00]--[2022-12-02 Fri 17:15] =>  1:15
CLOCK: [2022-12-02 Fri 05:00]--[2022-12-02 Fri 06:30] =>  1:30
:END:
** ~log_extractor~
*** ~play_secs~ and ~play_time~ for last row being processed
- Since there isn't a subsequent entry for calculating play time / duration, special handling is required
- Pandas dates (~Timestamps~) don't have the functionality required, but ~datetime~ does; this requires converting Pandas dates to Python dates
- I have opted to use midnight of the date being processed as the "next" timestamp [[https://w3resource.com/python-exercises/date-time-exercise/python-date-time-exercise-8.php][Helpful article]]
*** Old Log Files Remain After Being Compressed
- How did I miss this?
- After deleting them, directory size went from 12 GB down to 2.6 GB

* Thursday, December 1, 2022
:LOGBOOK:
CLOCK: [2022-12-01 Thu 17:00]--[2022-12-01 Thu 18:15] =>  1:15
CLOCK: [2022-12-01 Thu 08:30]--[2022-12-01 Thu 09:15] =>  0:45
CLOCK: [2022-12-01 Thu 06:00]--[2022-12-01 Thu 07:30] =>  1:30
CLOCK: [2022-12-01 Thu 00:30]--[2022-12-01 Thu 01:53] =>  1:23
:END:
** ~build_top_lists~ (fewer items than list size)
- Updated logic to create playlists if rowcount is only missing two items (ie. a Top 10 list can have eight or nine items)
** ~log_extractor~ failed (cron job)
- ~play_time~ is calculated for each new entry, but the last entry can't be calculated because there isn't a subsequent entry with a ~play_date~, resulting in a database error
- I fixed it, for now

* Wednesday, November 30, 2022
:LOGBOOK:
CLOCK: [2022-11-30 Wed 04:00]--[2022-11-30 Wed 04:15] =>  0:15
:END:
** ~log_analyzer~
- Ran last night, but with the old version in ~~/bin~, so it still calculated the wrong play times (my fault)
- Installed the latest version
** File MetaData
- [[https://askubuntu.com/a/899434/280037][How to update metadata on MP4 files]]

* Tuesday, November 29, 2022
:LOGBOOK:
CLOCK: [2022-11-29 Tue 19:30]--[2022-11-29 Tue 19:55] =>  0:25
CLOCK: [2022-11-29 Tue 16:45]--[2022-11-29 Tue 17:20] =>  0:35
CLOCK: [2022-11-29 Tue 11:35]--[2022-11-29 Tue 12:35] =>  1:00
CLOCK: [2022-11-29 Tue 04:00]--[2022-11-29 Tue 07:30] =>  3:30
CLOCK: [2022-11-29 Tue 09:15]--[2022-11-29 Tue 11:15] =>  2:00
:END:
** Music Analytics
*** Duration of Play Time
- I mostly want to be able to detect songs that get skipped, so they can be excluded from the counts for Top XX Lists
- I have been able to do this with SQL and Pandas
** Python
*** ~build_top_lists~
- The ~cron~ job produced zero results, which is incorrect because I was listening to my Top 40 lists, yesterday
- the ~log_extractor~ seems to be cause
- Re-ran the program after re-running ~log_extractor~ and it worked, as expected
*** ~log_extractor~
**** Analysis of Crash
- The ~cron~ job crashed, last night
- The error messages complain about a primary key violation
- This is due to the fact that I modified the ~dt_playinfo~ table and copied data back, including the ~id~ column, which messed-up the ~IDENTITY~ constraint
- Re-ran the program after fixing the database and it worked, as expected
**** Modifications (version 0.4.13-dev0)
- Replaced CSV loader logic so that it uses the database and will process existing summary files
- https://towardsdatascience.com/all-the-pandas-shift-you-should-know-for-data-analysis-791c1692b5e
** Database
1. Using ~alembic~, I downgraded/upgraded the initial build to clear whatever was stored for the ~IDENTITY~ column
2. ~dt_playinfo_backup~ - Restored ~dt_playinfo~ and ~dt_playhistory~ *without* the ~id~ columns, thus letting PostgreSQL to handle generating the ~IDENTITY~ column (~id~) values

* Monday, November 28, 2022
:LOGBOOK:
CLOCK: [2022-11-28 Mon 14:00]--[2022-11-28 Mon 14:30] =>  0:30
CLOCK: [2022-11-28 Mon 08:30]--[2022-11-28 Mon 10:00] =>  1:30
CLOCK: [2022-11-28 Mon 05:25]--[2022-11-28 Mon 06:55] =>  1:30
CLOCK: [2022-11-28 Mon 04:00]--[2022-11-28 Mon 05:00] =>  1:00
:END:
** ~build_top_lists~
- It ran as a ~cron~ job last night, but didn't produce a playlist--I was expecting a daily playlist
  * The log indicates that I only listened to two songs more than once, yesterday
  * I mostly listened to the ~Random.m3u~ playlist
** ~click~ module
- Changing the ~main()~ call to ~main(standalone=False)~ keeps the program running
- ~eoj()~ is running, again
** Database
- I [[https://stackoverflow.com/a/71041431/2719754][found a way]] to add durations to ~dt_playinfo~, but it is taking a long time to run
  * It finally finished, after nearly half an hour
  * I set the limit on my view to 10,000 rows, but the database says it updated 115,204 rows (the entire table)
  * It looks like running ~VACUUM FULL~ is what made the difference
  * The ~UPDATE~ didn't work--the ~play_secs~ and ~play_time~ columns have all the same values
- I also figured-out how to do it with Pandas in Python, but I haven't tried to update the database with it

* Sunday, November 27, 2022
:LOGBOOK:
CLOCK: [2022-11-27 Sun 17:20]--[2022-11-27 Sun 18:23] =>  1:03
CLOCK: [2022-11-27 Sun 15:45]--[2022-11-27 Sun 17:00] =>  1:15
CLOCK: [2022-11-27 Sun 05:00]--[2022-11-27 Sun 12:30] =>  7:30
:END:
** ~build_top_lists~
- For now, it accepts a single date argument from the command line
- During testing, I am seeing single line entries for the ~init()~ function and I don't know why
- Added logic to create symlinks
** ~generate_lists.py~ (one-time use)
- generates list of dates (~dates.txt~) that can be sent to ~build_top_lists~
- This is mostly for re-generating lists from the music history database
** ~generate_lists.sh~ (one-time use)
- Takes the output from ~generate_lists.py~ (in ~dates.txt~) and sends it to ~build_top_lists~
** ~log_analyzer~
- Removed symlink logic and added it to ~build_top_lists~

* Saturday, November 26, 2022
:LOGBOOK:
CLOCK: [2022-11-26 Sat 06:00]--[2022-11-26 Sat 10:00] =>  4:00
:END:
- More fiddling with ~dim_date~--I think I'm going to turn this into its own project
  
* Friday, November 25, 2022
:LOGBOOK:
CLOCK: [2022-11-25 Fri 17:15]--[2022-11-25 Fri 17:40] =>  0:25
:END:
- I got the date dimension table, ~dim_date~, so it contains week-related columns with Sunday as the first day of the week (non-ISO)
- I am surprised that this isn't part of PostgreSQL
- Now, I can continue with building playlists
- Fix year in week 53 (ie. first week of 1977)

* Thursday, November 24, 2022
:LOGBOOK:
CLOCK: [2022-11-24 Thu 04:05]--[2022-11-24 Thu 11:45] =>  7:40
:END:
** Revisited ~~/Tutorials/AdvLogging~
- Time to incorporate logging into this project
** Python script: ~build_top_lists~ Generates periodic Top XXX lists
- I just realized that I can select rows using columns like ~last_day_of_week~, ~last_day_of_month~, ~last_day_of_year~
- Re-doing date dimension table ~dim_date~, so that it has more consistent names, for scripting purposes

* Tuesday, November 22, 2022
:LOGBOOK:
CLOCK: [2022-11-22 Tue 10:30]--[2022-11-22 Tue 12:30] =>  2:00
CLOCK: [2022-11-22 Tue 05:00]--[2022-11-22 Tue 06:35] =>  1:35
:END:
** Python script: ~top_daily_lists~ - Generates Top 10 Daily lists in a loop
- Trying to implement the loop part AND save the lists with a SQL script wasn't working
- The list logic is stored in the ~dbeaver~ directory (SQL)
- I should be able to modify ~top_daily_lists~ to generate weekly, monthly, and yearly lists
- I changed the naming convention from ~Top10_Daily_YYY-MM-DD.m3u~ to ~Top10_Weekday.m3u~, where ~Weekday~ is the actual day of the week for the playlist
  * This helps simplify things, including reducing clutter

** Python script: ~build_top_lists~ - Generates periodic Top XXX lists
- Working on weekly, monthly, and yearly versions of the Top XXX list generator (without the looping)
  
* Monday, November 21, 2022
:LOGBOOK:
CLOCK: [2022-11-21 Mon 07:00]--[2022-11-21 Mon 12:32] =>  5:32
:END:
- Working on Top XX lists
- I created a bunch of lists, but it looks like I need to correct the SQL for Daily lists

* Sunday, November 20, 2022
:LOGBOOK:
CLOCK: [2022-11-20 Sun 12:45]--[2022-11-20 Sun 13:10] =>  0:25
:END:
- Updated SQL for generating TOP XX lists using DBeaver

* Wednesday, November 2, 2022
:LOGBOOK:
CLOCK: [2022-11-02 Wed 07:54]--[2022-11-02 Wed 09:44] =>  1:50
CLOCK: [2022-11-02 Wed 03:19]--[2022-11-02 Wed 04:54] =>  1:35
:END:
- It seems that the midnight run of ~log_analyzer~ failed because I forgot to install it, but 
  * When I ran it manually, nothing happened
  * I had to delete the summary file, ~20221101.csv.xz~, in order for it to run
    + I want to eliminate the need for the CSV files, altogether
    + I started with adding ~SAVE_SUMMARIES~ to the environment / configuration
- After creating a date dimension table, it seems appropriate to create a file dimension
  * A folder dimension seems to be part of this, and I have already worked on these things with FileInfo and FolderInfo classes in Python

* Tuesday, November 1, 2022
:LOGBOOK:
CLOCK: [2022-11-01 Tue 04:27]--[2022-11-01 Tue 12:09] =>  7:42
:END:
- Examining whether or not there should be a DATE column in ~dt_log_analyzer~, for use in ~JOIN~ statements
  * I tested this with ~dt_playinfo_test~ and it works well
  * I can see this eliminating the need for the CSV files in the ~Summaries~ directory, altogether
- Renamed ~d_date~ to ~dim_date~, for now

* Friday, October 28, 2022
:LOGBOOK:
CLOCK: [2022-10-28 Fri 15:27]--[2022-10-28 Fri 18:29] =>  3:02
:END:
- Added date dimension table, ~d_date~

* Wednesday, October 26, 2022
:LOGBOOK:
CLOCK: [2022-10-26 Wed 04:12]--[2022-10-26 Wed 04:15] =>  0:03
:END:
- ~log_analyzer~ ran overnight, without a hitch; the ~to_sql~ function is using ~append~ now, instead of ~replace~

* Tuesday, October 25, 2022
:LOGBOOK:
CLOCK: [2022-10-25 Tue 16:53]--[2022-10-25 Tue 17:16] =>  0:23
CLOCK: [2022-10-25 Tue 11:38]--[2022-10-25 Tue 12:58] =>  1:20
CLOCK: [2022-10-25 Tue 04:15]--[2022-10-25 Tue 07:22] =>  3:07
:END:
- Moved ~config.py~ from ~src/musichistory~ to ~~/.config/MusicHistory~; this seems to make the ~.env~ file irrelevant, unless I also move it
- ~log_analyzer2~ has been merged into ~log_extractor~
- Imported the old ~smplayer_history~ file (~20220518.csv.xz~)
- The database now contains all of the music history data

* Monday, October 24, 2022
:LOGBOOK:
CLOCK: [2022-10-24 Mon 14:36]--[2022-10-24 Mon 16:32] =>  1:56
CLOCK: [2022-10-24 Mon 04:24]--[2022-10-24 Mon 06:21] =>  1:57
:END:
- After binge-watching /St. Elsewhere/ and /The X-Files/, I have actually been listening to music for the last couple of days, so it is time to work on the Top XXX lists
- I see the database has incorrect timestamps (in the future)
  * ~log_extractor~ - This is where timestamps and filenames are extracted from the SMPlayer logs and CSV summaries are created; I moved the logic to convert timestamps here, since they are correct
  * Re-running ~log_extractor~ on the entire dataset (150 days worth)
- The ~MusicHistory~ folder is 56 GB in size!
  * Compressed about 150 file with ~xz~ and got it down to 2.1 GB
- Ready to combine ~log_extractor2~ and ~log_analyzer~
- Created ~touchdirs2.py~ as a scratch file, as a replacement for ~touchdirs~
  * It uses ~os.walk~ and is both faster and simpler than I expected
  * It isn't ready for production-use, yet--I need to code logic for filetypes like MP4

* Friday, June 17, 2022
:LOGBOOK:
CLOCK: [2022-06-17 Fri 15:42]--[2022-06-17 Fri 18:23] =>  2:41
CLOCK: [2022-06-17 Fri 12:20]--[2022-06-17 Fri 12:32] =>  0:12
CLOCK: [2022-06-17 Fri 06:55]--[2022-06-17 Fri 07:22] =>  0:27
:END:
- Moved ~Music-Analytics~ from the old ~MusicHistory~ project to the ~bin~ directory and renamed it to ~log_analyzer~, to standardize the command names
  * It doesn't work with the new log files, yet
  * I'm not sure how to add any of these as commands to the project, so that they will be installed, but that can come later
- The CSV files have Unix timestamps, but Pandas ~to_datetime()~  function doesn't produce the correct date, so I will try it in the database, instead
- Created baseline for ~developmentdb.media_library~ 

* Tuesday, June 14, 2022
:LOGBOOK:
CLOCK: [2022-06-14 Tue 14:05]--[2022-06-14 Tue 16:23] =>  2:18
CLOCK: [2022-06-14 Tue 09:34]--[2022-06-14 Tue 11:02] =>  1:28
:END:
- After mucking-about with multidb and schemas, it looks like I misunderstood what ~multidb~ is all about
  * My app only uses one database, so the ~--multidb~ option when initializing alembic is unnecessary
  * Multiple schemas can be used with a single database by way of the ~--name~ option and corresponding section in ~alembic.ini~
- Alembic Test #3 was supposed to use the ~development~ schema, ~media_library~ but it used ~alembic_test~, as specified in ~.env~
- Alembic Test #4 was successful, after I temporarily renamed ~dt_fileinfo~, in order to verify that the upgrade script works
  * It should be noted that Alembic uses the environment set in ~models.py~, not ~alembic.ini~
** Multi-Schema Alembic Configuration has been achieved
- I haven't created a baseline for the ~developmentdb~ database, yet, but I created a few database and schema combinations that enabled me to configure Alembic to work with the databases and schemas of my choosing, as defined in ~models.py~, which calls ~config.py~, which loads environment variables stored in ~.env~ files
- ~alembic.ini~ needs to have named sections that correspond to the database/schema combinations in the application, and ~version_locations~ defined for each one
- See [[./src/musichistory/alembic_history][alembic_history]] for the command history of tests performed
** DONE Next Steps
*** DONE Create a baseline for the database
*** DONE Bring commands over from ~MusicHistory_old~
  
* Monday, June 13, 2022
:LOGBOOK:
CLOCK: [2022-06-13 Mon 20:07]--[2022-06-13 Mon 22:11] =>  2:04
CLOCK: [2022-06-13 Mon 13:33]--[2022-06-13 Mon 18:09] =>  4:36
CLOCK: [2022-06-13 Mon 08:48]--[2022-06-13 Mon 12:24] =>  3:36
:END:
- Alembic Reference: [[https://learningtotest.com/2021/06/17/managing-alembic-migrations-with-a-single-alembic-ini-env-py/][Alembic Configuration]]
  * I think I need to change ~models.py~ to use ~create_engine~, if I am going to get this to work
- Another Reference: [[https://elarkk.github.io/blog/multi-schema-sqlalchemy][Multi-schema Postgres database handling through SQLAlchemy]]
  * This one needs work
- I was trying to get Alembic to handle multiple databases and schemas, but it isn't working
  * My current configuration does store the schema with the SQL operations, which is a good thing



